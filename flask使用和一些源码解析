flask

app.run()  --> run_simple(host, port, self, **options) 
执行app的call方法 --->  return self.wsgi_app(environ, start_response)


配置文件：
	app.config.from_pyfile("settings.py")
	app.config.from_object("settings.DevelopmentConfig")
	class Config:
    DEBUG = True
    TESTING = False
    DATABASE_URI = ""

	class ProductionConfig(Config):
		DATABASE_URI = ""


	class DevelopmentConfig(Config):
		DEBUG = True


	class TestingConfig(Config):
		TESTING = True

路由系统：
	app.route() -->  装饰器实现  endpoint不写默认返回func的名字
	        def decorator(f):
            endpoint = options.pop("endpoint", None)
            self.add_url_rule(rule, endpoint, f, **options)
            return f

        	return decorator

	路由比较特殊,基于装饰器来实现,但究其本质是通过add_url_rule函数来实现
	app.add_url_rule('/login', 'n2', login, methods=['GET', 'POST'])

	app.route()参数:
		defaults={'nid':888}  路由中没有参数  函数需要参数时
		strict_slashes = None  不需要严格匹配url index index/均可
		redirect_to="index2/"  访问url时直接跳转到对应url
		subdomain="admin" "<username>" 子域名访问
			app.config["SERVER_NAME"] = 'oldboy.com:5000' --> ip地址
			hosts文件  c:windows/system32/drivers/etc/hosts


	CBV:    as_view方法 --> view方法 --> 封装类信息 --> dispatch_request方法
		class IndexView(views.MethodView):
			methods = ["GET", "POST"]
			decorators = [auth, ]

			def get(self):
				return "Index.GET"

			def post(self):
				return 'Index POST'

		app.add_url_rule('/index', view_func=IndexView.as_view(name='index'))



自定义url匹配
	from werkzeug.routing import BaseConverter
	# 1. 写RegexConverter类
	class RegexConverter(BaseConverter):
		'''自定义URL匹配正则表达式'''
		def __init__(self, map, regex):
			super(RegexConverter, self).__init__(map)
			self.regex = regex

		def to_python(self, value):
			'''路由匹配时，匹配成功后传递给视图函数前操作参数的值'''
			return value

		def to_url(self, value) -> str:
			''' 视图中使用url_for()之前会调用to_url对参数进行操作'''
			val = super(RegexConverter, self).to_url(value)
			return val

	# 2. 将RegexConverter添加到flask中
	app1.url_map.converters['regex'] = RegexConverter


	@app1.route('/index/<regex("\d+"):nid>')
	def index(nid):
		print(url_for('index', nid='888'))
		return "app01"

Markup 转义  或者前端 |safe


闪现：
	flash(xxx)   get_flashed_messages()  保存值  取所有值然后清除


请求扩展：
	@app.before_request  请求前实现  
	def process_request(*args, **kwargs):
		print()

	@app.after_request  响应时执行   
	def process_response(response, *args, **kwargs):
		return response

	@app.errorhandler(404)  定义错误信息
	def error_404(arg):
		return "404"

	@app.template_global()  模板里定制函数
	def ss(n1, n2)
		return n1+n2
	{{ ss(1,2) }}

	@app.before_first_request  第一次请求来之前执行

蓝图： 构造程序目录
	init文件:
		from flask import Flask, Blueprint
		app = Flask(__name__, template_folder='templates', static_folder='statics', static_url_path='/static')
		from .views.user import user
		from .views.blog import blog

		app.register_blueprint(user)
		app.register_blueprint(blog)

	user文件:
		from flask import Blueprint

		user = Blueprint('user', __name__, url_prefix="/")

		@user.route('/user.html', methods=["GET", "POST"])
		def user():
			return "user"

	run文件:
		from pro_flask import app

		if __name__ == "__main__":
			app.run()


上下文管理

ThreadLocal对象,用于为每个线程开辟一块空间来保存它独有的值
from _thread import get_ident  # 支持线程'  唯一标识
from greenlet import getcurrent as get_ident # 支持协程


- 源码 request
	情况一 ： 单进程单线程， 基于全局变量做
	情况二 ： 单进程多线程 ， threading.local对象
	情况三 ： 单进程单线程（多个协程） ，threading.local对象做不到

- 决定：
	1. 以后不支持协程：threading.local对象
	2. 支持：自定义类似threading.local对象（支持协程）

- 自定义类似threading.local对象

	PS:
		a.
			object.__setattr__(self, 'storage', {})
			代替self.storage = {}  避免setattr循环
		b.
			对象.xx
			def __setattr__(self, key, value):
				print(key, value)


内容详细：
	1. 上下文
		- threading.Local 和Flask自定义Local对象(为了支持协程)
		- 请求到来
			- ctx --> 封装RequestContext(request，session)
			-->其中request封装在Request类
			--> 执行ctx.push方法
			- ctx放到LocalStack中初始化实例Local对象中
			
		- 执行视图时
			- 导入request
			- print(request) -- >  LocalProxy对象的__str__
			- request.method ---> LocalProxy对象的__getattr__
			- request + 1    --- > LocalProxy对象的__add__
			- 调用__lookup_req_object函数 : 去local中将LocalStark.top()先获取到stack[-1]，再去requestContext中获取request或session
		
		- 请求结束
			- ctx.auto_pop() --> pop() --> LocalStack内pop() -->stack.pop
			- ctx从Local中移除


	-与django相比是两种不同的实现方式
		-django/tornado是通过传参数形式
		-flask是通过上下文管理
		两种都可以实现，只不过实现方式不一样
		- 上下文管理：
			- threading.local/Local类，其中创建了一个字典(greenlet做唯一标识，存数据) 保证数据隔离
			- 请求进来：
				- 请求相关所有数据封装到了RequestContext中
				- 再将RequestContext对象添加到Local中(通过LocalStack将对象添加到Local对象中)
			-  使用， 调用request
				- 调用此类方法 request.method  print(request)  会执行LocalProxy中对应的方法
				- 调用偏函数
				- 通过LocalStack中去Local中获取值
				  top方法调取列表最后一个值
			- 请求终止
				-通过LocalStack的pop方法 Local中将值移除



	2. 数据库连接池
	无连接池：
	  Django： django ORM
	  Flask/其他：
	  	- 原生SQL
	  	 - pymysql(2/3)
	  	 - MySQLdb(2)
	  	- SQLAlchemy(ORM)  (pymysql/MySQLdb)

	  原生SQL:
	  	CONN = pymysql.connect(
			host='127.0.0.1',
			port=3306,
			user="root",
			password="123456",
			database="dailyfresh",
			charset="utf8"
		)


		@app.route('/')
		def hello():
			with threading.Lock():
				cursors = CONN.cursor()
				cursors.execute('select * from tb1')
				result = cursors.fetchall()
				cursors.close()
				CONN.close()
				print(result)
			return  "hello world"
	  
	  - 问题
			可实现准确性， 但没有并发
	  - 解决
	  	1. 不能为每个用户创建一个链接
	  	2. 创建一定数量的连接池，如果有人来。

	  	DBUtils模块
	  		模式一： 为每个线程创建连接
	  		模式二： 创建n个链接，多线程来时，去获取

DBUtils：
单例模式做   sql操作类采用静态static方法
from flask import Flask
from dbutils.persistent_db import PersistentDB
from dbutils.pooled_db import PooledDB
import pymysql, threading
#  模式一
POOL = PersistentDB(
    creator=pymysql,
    maxusage=None,  #  一个链接最多被重复使用的次数，None表示无限制
    setsession=[], #  开始会话前执行的命令列表
    ping=0,  #  ping MsSQL服务端， 检查是否服务可用
    closeable=False,
    #  如果为False时， conn.close() 实际上被忽略，供下次使用，再关闭线程时，才会自动关闭链接。如果为True时，conn.close()则关闭链接
    threadlocal=None, #  本线程独享值的对象，用于保存链接对象，如果链接对象被重置
    host='127.0.0.1',
    port=3306,
    user='root',
    password='123456',
    database='dailyfresh',
    charset='utf8'
)

#  模式二
POOL2 = PooledDB(
    creator=pymysql,  # 使用链接数据库的模块
    maxconnections=6,  # 连接池允许的最大连接数，0和None表示不限制连接数
    mincached=2,  #  初始化时，连接池中至少创建的空闲的链接，0表示不创建
    maxcached=5,  #  连接池中最多闲置的链接，0和None不限制
    maxshared=3,  # 连接池中最多共享的连接数量，，0和None表示全部共享  无用
    blocking=True,  # 连接池中如果没有可用链接后，是否阻塞等待 True 等待  False 不等待然后报错
    maxusage=None,  # 一个链接最多被重复使用的次数 , None表示无限制
    setsession=[],  # 开始会话钱执行的命令列表
    ping=0,
    host='127.0.0.1',
    port=3306,
    user='root',
    password='123456',
    database='dailyfresh',
    charset='utf8'
)


'''
    监测当前正在运行连接数是否小于最大连接数，如果不小于则等待或报raise TooManyConnections异常
    否则
    优先去初始化时创建的链接中获取连接 SteadyDBConnection
    然后将SteadyDBConnection对象封装到PooledDedicatedDBConnection中并返回
    如果最开始创建的链接没有链接，则去创建一个SteadyDBConnection对象，在封装到PooledDedicatedDBConnection中并返回
    一旦关闭链接后，链接就会返回到连接池让后续线程继续使用
'''
conn = POOL2.connection(shareable=False)
cursor = conn.cursor()
cursor.execute('select * from tb1')
result = cursor.fetchall()
cursor.close()
print(result)

class SQLHelper(object):
     @staticmethod
     def fetch_one(sql, args):
         conn = POOL2.connection()
         cursor = conn.cursor()
         cursor.execute(sql, args)
         result = cursor.fetchone()
         conn.close()
         return result

     @staticmethod
     def fetch_all(sql, args):
         conn = POOL2.connection()
         cursor = conn.cursor()
         cursor.execute(sql, args)
         result = cursor.fetchall()
         conn.close()
         return result

#  result = SQLHelper.fetch_one('select * from tv1', [])
#  print(result)
	  	
      
内容详细：
	1. 上下文
	    a. 请求上下文
	    	- request
	    	- session
	    b. 应用上下文

			请求流程：
				1. 请求到来 有人来访问
					将请求相关的数据environ封装到了RequestContext对象中
					再将对象封装到Local中（每个线程/每个协程独立空间存储）
					ctx.app  ctx.request  ctx.session
					_request_ctx_stack.local = {
						唯一标识： {
							'stack' : [ctx,]
						}
					}

					app_ctx = AppContext对象
					app_ctx.app  app_ctx.g
					_app_ctx_stack.local = {
						唯一标识 : {
							'stack' : [app_ctx,]
						}

				2.  使用
						from flask import request, session, g, current_app
						print(request,session,g,current_app) 
						
						都会执行相应LocalProxy对象的__str__

						current_app = LocalProxy(_find_app)
						request = LocalProxy(partial(_lookup_req_object, "request"))
						session = LocalProxy(partial(_lookup_req_object, "session"))
						g = LocalProxy(partial(_lookup_app_object, "g"))
				
				3. 终止 全部pop()

			问题： flask的local中保存数据时，使用列表创建出来的栈，为什么用？
				- 如果写web程序，web运行环境：栈中永远保存一条数据 互不干扰
				- 如果写脚本获取app信息时，可能存在app上下文嵌套关系


	2. 多app应用
	from werkzeug.middleware.dispatcher import DispatcherMiddleware
	from werkzeug.serving import run_simple
	from flask import Flask, current_app
	app1 = Flask('app01')
	app2 = Flask('app02')

	@app1.route('/index')
	def index():
   	 return "app01"

	@app2.route('/index2') 
	def index2():
    	return "app2"

	# http://localhost:5000/index
	# http:/localhost:5000/sec/index2
	dm = DispatcherMiddleware(app1, {
	    '/sec': app2,
	})

	if __name__ == "__main__":
    	run_simple('localhost', 5000, dm)

	    问题： web访问多app应用时，上下文管理是如何实现的


Flask请求执行流程：
	信号
	before_first_request
	触发request_started信号
	before_request
	模板渲染
		渲染前的信号 before_render_template.send(app, template=template, context=context)
			rv=template.render(context)  # 模板渲染
		渲染后的信号 template_rendered.send(app,template=template, context=context)
	after_request
	session.save_session()
	触发 request_finished信号

	如果上述过程出错：
		触发错误处理信号，got_request_exception.send(self, exception = e)
	触发信号  request_tearing_down


MetaClass：
	MetaClass作用: 用来指定当前类由谁来创建(默认type创建)
	使用metaclass
	class Foo(metaclass=type):
		pass
	
	class Foo:
		__metaclass__ = type
	
	类继承：
		class Foo(metaclass=type):
			pass
		
		class Bar(Foo):
			pass
	
flask-session
	Flask中的session处理机制(内置：将session保存在加密cookie中):
		请求刚到来：获取随机字符串，存在则去数据库中获取原来的个人数据，否则创建一个空容器， --> 内存：对象(随机字符串,{放置数据的容器})
			obj = 创建SecureCooikeSessionInterface()
			obj = open_session(self, request) = SecureCookieSession()
			self.session = SecureCookieSession()对象
		
		视图： 操作内存中对象(随机字符串，{放置数据的容器})
		响应： 内存对象(随机字符串，{放置数据的容器})
			   将数据保存到数据库
			   把随机字符串写在用户cookie中
	
	自定义：
		请求刚到来：
			创建特殊字典，并添加到Local中
			调用关系：
				self.session_interface.open_session(self,request)
				由于默认app中的session_interface=SecureCookieSessionInterface()
					SecureCookieSessionInterface().open_session(self,request)
			self.session = self.app.open_session(self,request)
		调用：
			session->LocalProxy->偏函数->LocalStack->Local
		请求终止：
			由于默认app中的session_interface=SecureCookieSessionInterface()
				SecureCookieSessionInterface().save_session(self,app,session,response)
			由于默认app中的session_interface=MySessionInterFace()
				MySessionInterfave().save_session(self,app,session,response)
		
	flask-session:
		方式一：
			from redis import Redis
			conn = Redis()
			app.session_interface = RedisSessionInterface(conn, key_prefix='__', user_signer=False)
		
		方式二:
			from redis import Redis
			from flask.ext.session import Session
			app.config['SESSION_TYPE'] =  'redis'
			app.config['SESSION_REDIS'] = Redis(host='',port='')
			Session(app)
	
	问题：
		设置cookie时，如何设定关闭浏览器cookie失效
			response.set_cookie('k', 'v', expire=None)


wtforms:
	from wtforms import widgets, Form
	from flask import Flask, render_template, request, redirect
	from wtforms.fields import simple, html5, core
	from wtforms import validators

	app = Flask(__name__, template_folder='templates')

	app.debug = True


	# 1. 由于 metaclass=FromMeta，所以LoginForm是由FormMeta创建，执行FormMeta.__init__
	# 2. 执行FormMeta.__init__()
	#       LoginForm._unbound_fields = None
	#       LoginForm._wtforms_meta = None
	# 3. 解释字段：
	#       name = simple.StringField(...)
	#       pwd = simple.PasswordField(...)
	#    结果：
	#       LoginForm.name = UnboundField(simple.StringField, StringField的所有参数)
	#       LoginForm.pwd = UnboundField(simple.PasswordField, PasswordField的所有参数)
	"""
	LoginForm = {
		'_unbound_fields': None,
		'_wtforms_meta' : None,
		'name': <1 UnboundField(simple.StringField,StringField的所有参数),>
		'pwd': <2 UnboundField(simple.PasswordField,PasswordField的所有参数),>
	"""

	class LoginForm(Form):
		name = simple.StringField(
			label='用户名',
			validators=[
				validators.DataRequired(message='用户名不能为空'),
				validators.Length(min=6, max=18, message='用户名长度必须大于%(min)d且小于%(max)d')
			],
			widget=widgets.TextInput(),
			render_kw={'class': 'form-control'},
			default='alex'
		)

		pwd = simple.PasswordField(
			label='密码',
			validators=[],
			widget=widgets.PasswordInput(),
			render_kw={'class': 'form-control'}
		)

		pwd_confirm = simple.PasswordField(
			label='重复密码',
			validators=[
				validators.DataRequired(message='重复密码不能为空'),
				validators.EqualTo('pwd', message='两次密码输入不一致')
			],
			widget=widgets.PasswordInput(),
			render_kw={'class': 'form-control'}
		)

		email = html5.EmailField(
			label='邮箱',
			validators=[
				validators.DataRequired(message='邮箱不能为空'),
				validators.Email(message='邮箱格式错误')
			],
			# widget=widgets.TextInput(input_type='email'),
			render_kw={'class': 'form-control'}
		)

		gender = core.RadioField(
			label='性别',
			choices=(
				(1, '男'),
				(2, '女')
			),
			coerce=int
		)

		city = core.SelectField(
			label='城市',
			choices=(
				('bj', '北京'),
				('sh', '上海'),
			)
		)

		favor = core.SelectMultipleField(
			label='爱好',
			choices=(
				(1, '篮球'),
				(2, '足球')
			),
			widget=widgets.ListWidget(prefix_label=False),
			option_widget=widgets.CheckboxInput(),
			coerce=int,
			default=[1, 2]
		)

		def __init__(self, *args, **kwargs):
			super(LoginForm, self).__init__(*args, **kwargs)
			self.favor.choices = ((1, "篮球"), (2, "足球"), (3, "羽毛球"))


	@app.route('/register', methods=['GET', 'POST'])
	def login():
		# 实例化LoginForm
		# 1. 执行FormMeta的__call__方法
		"""
			class Meta(DefaultMeta):
				pass
			LoginForm = {
				'_unbound_fields': [
					(name, UnboundField对象(1, simple.StringField,参数)),
					(pwd, UnboundField对象(2, simple.PasswordField,参数)),
				],
				'_wtforms_meta' : Meta,
				'name': <1 UnboundField(simple.StringField,StringField的所有参数),>
				'pwd': <2 UnboundField(simple.PasswordField,PasswordField的所有参数),>
			}
		"""
		# 2. 执行LoginForm的__new__方法
		#       pass
		# 3. 执行LoginForm的__init__方法
		"""
			LoginForm = {
				'_unbound_fields': [
					(name, UnboundField对象(1, simple.StringField,参数)),
					(pwd, UnboundField对象(2, simple.PasswordField,参数)),
				],
				'_wtforms_meta' : Meta,
				'name': <1 UnboundField(simple.StringField,StringField的所有参数),>
				'pwd': <2 UnboundField(simple.PasswordField,PasswordField的所有参数),>
			}
			form = {
				_fields : {
					name: StringField对象(),
					pwd: PasswordField对象(),
				},
				name: StringField对象(),
				pwd: PasswordField对象(),
			}
		"""
		form = LoginForm()
		# form._fields['name']
		# form.name = StringField()
		"""
		1. StringField.__str__
		2. StringField.__call__
		3. meta.render_field(StringField对象,)
		4. StringField对象.widget(field, **render_kw)
		5. 插件.__call__
		"""
		if request.method == "GET":
			print(form.name)
			for item in form:
				# item是fields中的每一个字段
				print(item)
		else:
			# 上述流程相同
			# 从请求中获取每一个值，再复制到每个字段对象中
			"""
			form = {
				_fields: {
					name: StringField对象(data=你输入的用户名),
					pwd: PasswordField对象(data=你输入的密码),
				},
				name: StringField对象(widget=widgets.TextInput(data=你输入的用户名)),
				pwd: PasswordField对象(widget=widgets.PasswordInput(data=你输入的密码)),
			}
			"""
			# 请求发过来的值
			form = LoginForm(formdata=request.form)  # 值.gitlist()

			# 实例： 编辑
			# 从数据库对象
			form = LoginForm(obj=request.form)  # 值.pwd/值.name
			# 字典
			form = LoginForm(data=request.form)  # 值['name']

			"""
			1. 循环所有的字段
			2. 为每个字段执行他的验证流程
			
			"""
			if form.validate():
				print(form.data)
			else:
				print(form.errors)
		return render_template('login.html')




SQLAlchemy:
	from sqlalchemy import create_engine
	from sqlalchemy.ext.declarative import declarative_base
	from sqlalchemy import Column, Integer, String, Text, ForeignKey, DateTime, UniqueConstraint, Index
	import datetime
	from sqlalchemy.orm import sessionmaker, scoped_session

	# 创建连接池
		engine = create_engine(
			'mysql+pymysql://root:123456@127.0.0.1:3306/s6?charset=utf8',
			max_overflow=0,  # 超过连接池大小外最多创建的连接
			pool_size=5,  # 连接池大小
			pool_timeout=30,  # 池中没有线程最多等待的时间，否则报错
			pool_recycle=-1  # 多久之后对线程池中的线程进行一次连接的回收(重置)
		)
		Session = sessionmaker(bind=engine)

		# 从连接池中获取数据库连接
		# session = Session()
		session = scoped_session(Session)
		# 执行ORM操作
		obj = models.Users(name='alex', email='alex@xx.com')
		session.add(obj)
		# 批量增加
		session.add_all([
			models.Users(name='alex', email='alex@xx.com'),
			models.Users(name='alex2', email='alex2@xx.com'),
		])	

		# 提交事务
		session.commit()

		# 查询
		user_list = session.query(models.User).all()
		for row in user_list:
			print(row.id)
			print(row.name)

		
		# 删除
		session.query(models.User).filter(models.User.id > 2).delete()
		session.commite()

		# 修改
		session.query(models.User).filter(models.User.id > 2).update({'name': "eric"})
		session.commit()
		
		# 关闭数据库连接(连接放回连接池)
		session.close()
	
Flask-SQLAlchemy
	db = SQLAlchemy()
		包含配置   ORM基类  create_all  engine 创建连接


pipreqs
	程序根目录下 pipreqs ./  查看所有软件包版本 自动生成requirement.txt


flask_script：
	from flask_script import Manager
	app = create_app()
	manager = Manager(app)
	if __name__ == "__main__":
		manager.run()
	

flask_migrate:
	from flask_migrate import migrate, MigrateCommand
	migrate = Migrate(app, db)
	manager.add_command('db', MigrateCommand)

	数据库迁移命名
		python manage.py db init
		python manage.py db migrate
		python manage.py db upgrade
	
